# users/management/commands/populate_db.py

from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from courses.models import Course, Module, Lesson
from learning.models import Enrollment, LessonProgress
from gamification.models import Badge, UserBadge, XPHistory
from datetime import datetime, timedelta
import random

User = get_user_model()


class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–æ–≤—ã–π –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä –±–∏–ª–∞–Ω –±–∞–∑–∞–Ω–∏ —Ç—û–ª–¥–∏—Ä–∏—à'

    def handle(self, *args, **kwargs):
        self.stdout.write('–ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ —Ç—û–ª–¥–∏—Ä–∏—à –±–æ—à–ª–∞–Ω–¥–∏...')

        # 1. –ë–∞–¥–∂–ª–∞—Ä —è—Ä–∞—Ç–∏—à
        self.create_badges()

        # 2. –ö—É—Ä—Å–ª–∞—Ä —è—Ä–∞—Ç–∏—à
        self.create_courses()

        # 3. –¢–µ—Å—Ç —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä
        self.create_test_users()

        # 4. Enrollment —è—Ä–∞—Ç–∏—à
        self.create_enrollments()

        self.stdout.write(self.style.SUCCESS('‚úÖ –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ “õ—û—à–∏–ª–¥–∏!'))

    def create_badges(self):
        """–ë–∞–¥–∂–ª–∞—Ä —è—Ä–∞—Ç–∏—à"""
        badges_data = [
            {
                'name': '–ë–∏—Ä–∏–Ω—á–∏ “ö–∞–¥–∞–º',
                'description': '–ë–∏—Ä–∏–Ω—á–∏ –¥–∞—Ä—Å–Ω–∏ —Ç–∞–º–æ–º–ª–∞—à',
                'icon': 'ü•á',
                'requirement_type': 'lessons_completed',
                'requirement_value': 1,
                'xp_reward': 50
            },
            {
                'name': '7 –ö—É–Ω–ª–∏–∫ –°—Ç—Ä–∏–∫',
                'description': '7 –∫—É–Ω –∫–µ—Ç–º–∞-–∫–µ—Ç –∏—à–ª–∞—à',
                'icon': 'üî•',
                'requirement_type': 'streak',
                'requirement_value': 7,
                'xp_reward': 100
            },
            {
                'name': '–ë–∏—Ä–∏–Ω—á–∏ –ö—É—Ä—Å',
                'description': '–ë–∏—Ä–∏–Ω—á–∏ –∫—É—Ä—Å–Ω–∏ —Ç—É–≥–∞–ª–ª–∞—à',
                'icon': 'üèÜ',
                'requirement_type': 'courses_completed',
                'requirement_value': 1,
                'xp_reward': 500
            },
            {
                'name': '–ö–æ–¥ –ú–∞—Å—Ç–µ—Ä',
                'description': '50 —Ç–∞ –∫–æ–¥ –º–∞—à“õ–∏–Ω–∏ –µ—á–∏—à',
                'icon': '‚ö°',
                'requirement_type': 'code_exercises',
                'requirement_value': 50,
                'xp_reward': 300
            },
            {
                'name': '–°–∞–≤–æ–ª –ë–µ—Ä–≥—É–≤—á–∏',
                'description': '10 —Ç–∞ —Å–∞–≤–æ–ª –±–µ—Ä–∏—à',
                'icon': '‚ùì',
                'requirement_type': 'questions_asked',
                'requirement_value': 10,
                'xp_reward': 100
            },
            {
                'name': '–Å—Ä–¥–∞–º—á–∏',
                'description': '–ë–æ—à“õ–∞–ª–∞—Ä–≥–∞ 5 —Ç–∞ –∂–∞–≤–æ–± –±–µ—Ä–∏—à',
                'icon': 'ü§ù',
                'requirement_type': 'answers_given',
                'requirement_value': 5,
                'xp_reward': 150
            },
        ]

        for badge_data in badges_data:
            Badge.objects.get_or_create(**badge_data)

        self.stdout.write('‚úÖ –ë–∞–¥–∂–ª–∞—Ä —è—Ä–∞—Ç–∏–ª–¥–∏')

    def create_courses(self):
        """–ö—É—Ä—Å–ª–∞—Ä —è—Ä–∞—Ç–∏—à"""
        courses_data = [
            {
                'title': 'Python Basics',
                'description': 'Python –¥–∞—Å—Ç—É—Ä–ª–∞—à —Ç–∏–ª–∏–Ω–∏–Ω–≥ –∞—Å–æ—Å–ª–∞—Ä–∏. –é–∑–≥–∞—Ä—É–≤—á–∏–ª–∞—Ä, —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä, —Ü–∏–∫–ª–∞—Ä –≤–∞ —à–∞—Ä—Ç–ª–∞—Ä.',
                'level': 'beginner',
                'duration_hours': 20,
                'is_free': True,
                'price': 0,
                'is_published': True,
                'students_count': 1250,
                'rating': 4.8,
            },
            {
                'title': 'Django Web Development',
                'description': 'Django —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏–¥–∞ –≤–µ–± –∏–ª–æ–≤–∞–ª–∞—Ä —è—Ä–∞—Ç–∏—à–Ω–∏ —û—Ä–≥–∞–Ω–∏–Ω–≥. Backend, Frontend, Database.',
                'level': 'intermediate',
                'duration_hours': 40,
                'is_free': False,
                'price': 299000,
                'is_published': True,
                'students_count': 850,
                'rating': 4.9,
            },
            {
                'title': 'JavaScript Modern',
                'description': '–ó–∞–º–æ–Ω–∞–≤–∏–π JavaScript (ES6+), DOM –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—è, Async/Await, API –±–∏–ª–∞–Ω –∏—à–ª–∞—à.',
                'level': 'beginner',
                'duration_hours': 25,
                'is_free': True,
                'price': 0,
                'is_published': True,
                'students_count': 2100,
                'rating': 4.7,
            },
            {
                'title': 'React Advanced',
                'description': 'React –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Å–∏–¥–∞ –∏–ª“ì–æ—Ä —Ç–µ—Ö–Ω–∏–∫–∞–ª–∞—Ä. Hooks, Context API, Redux, TypeScript.',
                'level': 'advanced',
                'duration_hours': 50,
                'is_free': False,
                'price': 499000,
                'is_published': True,
                'students_count': 650,
                'rating': 4.9,
            },
            {
                'title': 'Data Science —Å Python',
                'description': '–ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä —Ç–∞“≥–ª–∏–ª–∏, –º–∞—à–∏–Ω–∞ —û—Ä–≥–∞–Ω–∏—à, NumPy, Pandas, Matplotlib, Scikit-learn.',
                'level': 'intermediate',
                'duration_hours': 60,
                'is_free': False,
                'price': 599000,
                'is_published': True,
                'students_count': 480,
                'rating': 4.8,
            },
        ]

        for course_data in courses_data:
            course, created = Course.objects.get_or_create(
                title=course_data['title'],
                defaults=course_data
            )

            if created:
                # –ú–æ–¥—É–ª–ª–∞—Ä “õ—û—à–∞–º–∏–∑
                self.create_modules_for_course(course)

        self.stdout.write('‚úÖ –ö—É—Ä—Å–ª–∞—Ä —è—Ä–∞—Ç–∏–ª–¥–∏')

    def create_modules_for_course(self, course):
        """–ö—É—Ä—Å —É—á—É–Ω –º–æ–¥—É–ª–ª–∞—Ä —è—Ä–∞—Ç–∏—à"""
        if course.title == 'Python Basics':
            modules_data = [
                {'title': '–ö–∏—Ä–∏—à', 'description': 'Python –Ω–∏–º–∞? –é—Ä–Ω–∞—Ç–∏—à –≤–∞ –±–∏—Ä–∏–Ω—á–∏ –¥–∞—Å—Ç—É—Ä', 'order': 1},
                {'title': '–é–∑–≥–∞—Ä—É–≤—á–∏–ª–∞—Ä –≤–∞ —Ç—É—Ä–ª–∞—Ä', 'description': '–ú–∞—ä–ª—É–º–æ—Ç —Ç—É—Ä–ª–∞—Ä–∏, —û–∑–≥–∞—Ä—É–≤—á–∏–ª–∞—Ä', 'order': 2},
                {'title': '–®–∞—Ä—Ç–ª–∞—Ä –≤–∞ —Ü–∏–∫–ª–∞—Ä', 'description': 'If-else, for, while', 'order': 3},
                {'title': '–§—É–Ω–∫—Ü–∏—è–ª–∞—Ä', 'description': '–§—É–Ω–∫—Ü–∏—è —è—Ä–∞—Ç–∏—à, –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–∞—Ä, return', 'order': 4},
                {'title': '–†—û–π—Ö–∞—Ç–ª–∞—Ä –≤–∞ –ª—É“ì–∞—Ç–ª–∞—Ä', 'description': 'List, Tuple, Dict, Set', 'order': 5},
            ]
        elif course.title == 'Django Web Development':
            modules_data = [
                {'title': 'Django –∞—Å–æ—Å–ª–∞—Ä–∏', 'description': 'Django —û—Ä–Ω–∞—Ç–∏—à, –ª–æ–π–∏—Ö–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Å–∏', 'order': 1},
                {'title': 'Models –≤–∞ Database', 'description': 'ORM, –º–∏–≥—Ä–∞—Ü–∏—è–ª–∞—Ä, –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª', 'order': 2},
                {'title': 'Views –≤–∞ Templates', 'description': 'URL routing, —à–∞–±–ª–æ–Ω–ª–∞—Ä', 'order': 3},
                {'title': 'Forms –≤–∞ Validation', 'description': '–§–æ—Ä–º–∞–ª–∞—Ä –±–∏–ª–∞–Ω –∏—à–ª–∞—à', 'order': 4},
                {'title': 'Authentication', 'description': '–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ —Ç–∏–∑–∏–º–∏', 'order': 5},
            ]
        else:
            modules_data = [
                {'title': '–ú–æ–¥—É–ª 1', 'description': '–ë–∏—Ä–∏–Ω—á–∏ –º–æ–¥—É–ª', 'order': 1},
                {'title': '–ú–æ–¥—É–ª 2', 'description': '–ò–∫–∫–∏–Ω—á–∏ –º–æ–¥—É–ª', 'order': 2},
                {'title': '–ú–æ–¥—É–ª 3', 'description': '–£—á–∏–Ω—á–∏ –º–æ–¥—É–ª', 'order': 3},
            ]

        for module_data in modules_data:
            module = Module.objects.create(course=course, **module_data)
            self.create_lessons_for_module(module)

    def create_lessons_for_module(self, module):
        """–ú–æ–¥—É–ª —É—á—É–Ω –¥–∞—Ä—Å–ª–∞—Ä —è—Ä–∞—Ç–∏—à"""
        lesson_types = ['video', 'text', 'quiz', 'code']

        for i in range(1, 6):
            Lesson.objects.create(
                module=module,
                title=f'–î–∞—Ä—Å {i}: {module.title}',
                lesson_type=random.choice(lesson_types),
                content=f'–ë—É {module.title} –¥–∞—Ä—Å–∏–Ω–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∏. –ë–∞—Ç–∞—Ñ—Å–∏–ª –º–∞—ä–ª—É–º–æ—Ç...',
                video_url='https://www.youtube.com/watch?v=example',
                duration_minutes=random.randint(10, 30),
                order=i,
                xp_reward=random.choice([50, 100, 150]),
                is_free=(i == 1)  # –ë–∏—Ä–∏–Ω—á–∏ –¥–∞—Ä—Å –±–µ–ø—É–ª
            )

    def create_test_users(self):
        """–¢–µ—Å—Ç —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä —è—Ä–∞—Ç–∏—à"""
        users_data = [
            {'username': 'alisher', 'first_name': '–ê–ª–∏—à–µ—Ä', 'last_name': '–ö–∞—Ä–∏–º–æ–≤', 'email': 'alisher@test.uz',
             'level': 15, 'xp': 8450},
            {'username': 'dilshod', 'first_name': '–î–∏–ª—à–æ–¥', 'last_name': '–£—Å–º–æ–Ω–æ–≤', 'email': 'dilshod@test.uz',
             'level': 14, 'xp': 7890},
            {'username': 'malika', 'first_name': '–ú–∞–ª–∏–∫–∞', 'last_name': '–†–∞“≥–∏–º–æ–≤–∞', 'email': 'malika@test.uz',
             'level': 13, 'xp': 7200},
            {'username': 'jasur', 'first_name': '–ñ–∞—Å—É—Ä', 'last_name': '–•–æ–ª–∏“õ–æ–≤', 'email': 'jasur@test.uz', 'level': 10,
             'xp': 5500},
            {'username': 'nodira', 'first_name': '–ù–æ–¥–∏—Ä–∞', 'last_name': '–¢–æ—à–º–∞—Ç–æ–≤–∞', 'email': 'nodira@test.uz',
             'level': 8, 'xp': 4200},
        ]

        for user_data in users_data:
            user, created = User.objects.get_or_create(
                username=user_data['username'],
                defaults={
                    'first_name': user_data['first_name'],
                    'last_name': user_data['last_name'],
                    'email': user_data['email'],
                    'level': user_data['level'],
                    'xp': user_data['xp'],
                    'current_streak': random.randint(1, 30),
                    'longest_streak': random.randint(10, 50),
                }
            )
            if created:
                user.set_password('test1234')
                user.save()

        self.stdout.write('‚úÖ –¢–µ—Å—Ç —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä —è—Ä–∞—Ç–∏–ª–¥–∏')

    def create_enrollments(self):
        """Enrollment —è—Ä–∞—Ç–∏—à"""
        users = User.objects.filter(user_type='student')[:3]
        courses = Course.objects.all()[:3]

        for user in users:
            for course in courses:
                enrollment, created = Enrollment.objects.get_or_create(
                    user=user,
                    course=course,
                    defaults={
                        'progress_percentage': random.uniform(10, 80),
                        'enrolled_at': datetime.now() - timedelta(days=random.randint(1, 30))
                    }
                )

        self.stdout.write('‚úÖ Enrollments —è—Ä–∞—Ç–∏–ª–¥–∏')